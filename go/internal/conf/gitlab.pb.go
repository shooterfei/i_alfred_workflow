// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: internal/conf/gitlab.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                        int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Description                               string                            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name                                      string                            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameWithNamespace                         string                            `protobuf:"bytes,4,opt,name=name_with_namespace,json=nameWithNamespace,proto3" json:"name_with_namespace,omitempty"`
	Path                                      string                            `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	PathWithNamespace                         string                            `protobuf:"bytes,6,opt,name=path_with_namespace,json=pathWithNamespace,proto3" json:"path_with_namespace,omitempty"`
	CreatedAt                                 string                            `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DefaultBranch                             string                            `protobuf:"bytes,8,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	TagList                                   []string                          `protobuf:"bytes,9,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	SshUrlToRepo                              string                            `protobuf:"bytes,10,opt,name=ssh_url_to_repo,json=sshUrlToRepo,proto3" json:"ssh_url_to_repo,omitempty"`
	HttpUrlToRepo                             string                            `protobuf:"bytes,11,opt,name=http_url_to_repo,json=httpUrlToRepo,proto3" json:"http_url_to_repo,omitempty"`
	WebUrl                                    string                            `protobuf:"bytes,12,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	ReadmeUrl                                 string                            `protobuf:"bytes,13,opt,name=readme_url,json=readmeUrl,proto3" json:"readme_url,omitempty"`
	AvatarUrl                                 string                            `protobuf:"bytes,14,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	StarCount                                 int64                             `protobuf:"varint,15,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	ForksCount                                int64                             `protobuf:"varint,16,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	LastActivityAt                            string                            `protobuf:"bytes,17,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"`
	Namespace                                 *GitLab_Namespace                 `protobuf:"bytes,18,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XLinks                                    *GitLab_XLinks                    `protobuf:"bytes,19,opt,name=_links,json=Links,proto3" json:"_links,omitempty"`
	EmptyRepo                                 bool                              `protobuf:"varint,20,opt,name=empty_repo,json=emptyRepo,proto3" json:"empty_repo,omitempty"`
	Archived                                  bool                              `protobuf:"varint,21,opt,name=archived,proto3" json:"archived,omitempty"`
	Visibility                                string                            `protobuf:"bytes,22,opt,name=visibility,proto3" json:"visibility,omitempty"`
	ResolveOutdatedDiffDiscussions            bool                              `protobuf:"varint,23,opt,name=resolve_outdated_diff_discussions,json=resolveOutdatedDiffDiscussions,proto3" json:"resolve_outdated_diff_discussions,omitempty"`
	ContainerRegistryEnabled                  bool                              `protobuf:"varint,24,opt,name=container_registry_enabled,json=containerRegistryEnabled,proto3" json:"container_registry_enabled,omitempty"`
	IssuesEnabled                             bool                              `protobuf:"varint,25,opt,name=issues_enabled,json=issuesEnabled,proto3" json:"issues_enabled,omitempty"`
	MergeRequestsEnabled                      bool                              `protobuf:"varint,26,opt,name=merge_requests_enabled,json=mergeRequestsEnabled,proto3" json:"merge_requests_enabled,omitempty"`
	WikiEnabled                               bool                              `protobuf:"varint,27,opt,name=wiki_enabled,json=wikiEnabled,proto3" json:"wiki_enabled,omitempty"`
	JobsEnabled                               bool                              `protobuf:"varint,28,opt,name=jobs_enabled,json=jobsEnabled,proto3" json:"jobs_enabled,omitempty"`
	SnippetsEnabled                           bool                              `protobuf:"varint,29,opt,name=snippets_enabled,json=snippetsEnabled,proto3" json:"snippets_enabled,omitempty"`
	CanCreateMergeRequestIn                   bool                              `protobuf:"varint,30,opt,name=can_create_merge_request_in,json=canCreateMergeRequestIn,proto3" json:"can_create_merge_request_in,omitempty"`
	IssuesAccessLevel                         string                            `protobuf:"bytes,31,opt,name=issues_access_level,json=issuesAccessLevel,proto3" json:"issues_access_level,omitempty"`
	RepositoryAccessLevel                     string                            `protobuf:"bytes,32,opt,name=repository_access_level,json=repositoryAccessLevel,proto3" json:"repository_access_level,omitempty"`
	MergeRequestsAccessLevel                  string                            `protobuf:"bytes,33,opt,name=merge_requests_access_level,json=mergeRequestsAccessLevel,proto3" json:"merge_requests_access_level,omitempty"`
	WikiAccessLevel                           string                            `protobuf:"bytes,34,opt,name=wiki_access_level,json=wikiAccessLevel,proto3" json:"wiki_access_level,omitempty"`
	BuildsAccessLevel                         string                            `protobuf:"bytes,35,opt,name=builds_access_level,json=buildsAccessLevel,proto3" json:"builds_access_level,omitempty"`
	SnippetsAccessLevel                       string                            `protobuf:"bytes,36,opt,name=snippets_access_level,json=snippetsAccessLevel,proto3" json:"snippets_access_level,omitempty"`
	PagesAccessLevel                          string                            `protobuf:"bytes,37,opt,name=pages_access_level,json=pagesAccessLevel,proto3" json:"pages_access_level,omitempty"`
	EmailsDisabled                            bool                              `protobuf:"varint,38,opt,name=emails_disabled,json=emailsDisabled,proto3" json:"emails_disabled,omitempty"`
	SharedRunnersEnabled                      bool                              `protobuf:"varint,39,opt,name=shared_runners_enabled,json=sharedRunnersEnabled,proto3" json:"shared_runners_enabled,omitempty"`
	LfsEnabled                                bool                              `protobuf:"varint,40,opt,name=lfs_enabled,json=lfsEnabled,proto3" json:"lfs_enabled,omitempty"`
	CreatorId                                 int32                             `protobuf:"varint,41,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	ImportStatus                              string                            `protobuf:"bytes,42,opt,name=import_status,json=importStatus,proto3" json:"import_status,omitempty"`
	OpenIssuesCount                           int32                             `protobuf:"varint,43,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	CiDefaultGitDepth                         int32                             `protobuf:"varint,44,opt,name=ci_default_git_depth,json=ciDefaultGitDepth,proto3" json:"ci_default_git_depth,omitempty"`
	PublicJobs                                bool                              `protobuf:"varint,45,opt,name=public_jobs,json=publicJobs,proto3" json:"public_jobs,omitempty"`
	BuildTimeout                              int32                             `protobuf:"varint,46,opt,name=build_timeout,json=buildTimeout,proto3" json:"build_timeout,omitempty"`
	AutoCancelPendingPipelines                string                            `protobuf:"bytes,47,opt,name=auto_cancel_pending_pipelines,json=autoCancelPendingPipelines,proto3" json:"auto_cancel_pending_pipelines,omitempty"`
	BuildCoverageRegex                        string                            `protobuf:"bytes,48,opt,name=build_coverage_regex,json=buildCoverageRegex,proto3" json:"build_coverage_regex,omitempty"`
	CiConfigPath                              string                            `protobuf:"bytes,49,opt,name=ci_config_path,json=ciConfigPath,proto3" json:"ci_config_path,omitempty"`
	SharedWithGroups                          []string                          `protobuf:"bytes,50,rep,name=shared_with_groups,json=sharedWithGroups,proto3" json:"shared_with_groups,omitempty"`
	OnlyAllowMergeIfPipelineSucceeds          bool                              `protobuf:"varint,51,opt,name=only_allow_merge_if_pipeline_succeeds,json=onlyAllowMergeIfPipelineSucceeds,proto3" json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
	RequestAccessEnabled                      bool                              `protobuf:"varint,52,opt,name=request_access_enabled,json=requestAccessEnabled,proto3" json:"request_access_enabled,omitempty"`
	OnlyAllowMergeIfAllDiscussionsAreResolved bool                              `protobuf:"varint,53,opt,name=only_allow_merge_if_all_discussions_are_resolved,json=onlyAllowMergeIfAllDiscussionsAreResolved,proto3" json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
	RemoveSourceBranchAfterMerge              bool                              `protobuf:"varint,54,opt,name=remove_source_branch_after_merge,json=removeSourceBranchAfterMerge,proto3" json:"remove_source_branch_after_merge,omitempty"`
	PrintingMergeRequestLinkEnabled           bool                              `protobuf:"varint,55,opt,name=printing_merge_request_link_enabled,json=printingMergeRequestLinkEnabled,proto3" json:"printing_merge_request_link_enabled,omitempty"`
	MergeMethod                               string                            `protobuf:"bytes,56,opt,name=merge_method,json=mergeMethod,proto3" json:"merge_method,omitempty"`
	SuggestionCommitMessage                   string                            `protobuf:"bytes,57,opt,name=suggestion_commit_message,json=suggestionCommitMessage,proto3" json:"suggestion_commit_message,omitempty"`
	AutoDevopsEnabled                         bool                              `protobuf:"varint,58,opt,name=auto_devops_enabled,json=autoDevopsEnabled,proto3" json:"auto_devops_enabled,omitempty"`
	AutoDevopsDeployStrategy                  string                            `protobuf:"bytes,59,opt,name=auto_devops_deploy_strategy,json=autoDevopsDeployStrategy,proto3" json:"auto_devops_deploy_strategy,omitempty"`
	AutocloseReferencedIssues                 bool                              `protobuf:"varint,60,opt,name=autoclose_referenced_issues,json=autocloseReferencedIssues,proto3" json:"autoclose_referenced_issues,omitempty"`
	Owner                                     *GitLab_Owner                     `protobuf:"bytes,61,opt,name=owner,proto3" json:"owner,omitempty"`
	ContainerExpirationPolicy                 *GitLab_ContainerExpirationPolicy `protobuf:"bytes,62,opt,name=container_expiration_policy,json=containerExpirationPolicy,proto3" json:"container_expiration_policy,omitempty"`
	Permissions                               *GitLab_Permissions               `protobuf:"bytes,63,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GitLab) Reset() {
	*x = GitLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab) ProtoMessage() {}

func (x *GitLab) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab.ProtoReflect.Descriptor instead.
func (*GitLab) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0}
}

func (x *GitLab) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitLab) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GitLab) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitLab) GetNameWithNamespace() string {
	if x != nil {
		return x.NameWithNamespace
	}
	return ""
}

func (x *GitLab) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitLab) GetPathWithNamespace() string {
	if x != nil {
		return x.PathWithNamespace
	}
	return ""
}

func (x *GitLab) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GitLab) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *GitLab) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *GitLab) GetSshUrlToRepo() string {
	if x != nil {
		return x.SshUrlToRepo
	}
	return ""
}

func (x *GitLab) GetHttpUrlToRepo() string {
	if x != nil {
		return x.HttpUrlToRepo
	}
	return ""
}

func (x *GitLab) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *GitLab) GetReadmeUrl() string {
	if x != nil {
		return x.ReadmeUrl
	}
	return ""
}

func (x *GitLab) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitLab) GetStarCount() int64 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

func (x *GitLab) GetForksCount() int64 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *GitLab) GetLastActivityAt() string {
	if x != nil {
		return x.LastActivityAt
	}
	return ""
}

func (x *GitLab) GetNamespace() *GitLab_Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GitLab) GetXLinks() *GitLab_XLinks {
	if x != nil {
		return x.XLinks
	}
	return nil
}

func (x *GitLab) GetEmptyRepo() bool {
	if x != nil {
		return x.EmptyRepo
	}
	return false
}

func (x *GitLab) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *GitLab) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *GitLab) GetResolveOutdatedDiffDiscussions() bool {
	if x != nil {
		return x.ResolveOutdatedDiffDiscussions
	}
	return false
}

func (x *GitLab) GetContainerRegistryEnabled() bool {
	if x != nil {
		return x.ContainerRegistryEnabled
	}
	return false
}

func (x *GitLab) GetIssuesEnabled() bool {
	if x != nil {
		return x.IssuesEnabled
	}
	return false
}

func (x *GitLab) GetMergeRequestsEnabled() bool {
	if x != nil {
		return x.MergeRequestsEnabled
	}
	return false
}

func (x *GitLab) GetWikiEnabled() bool {
	if x != nil {
		return x.WikiEnabled
	}
	return false
}

func (x *GitLab) GetJobsEnabled() bool {
	if x != nil {
		return x.JobsEnabled
	}
	return false
}

func (x *GitLab) GetSnippetsEnabled() bool {
	if x != nil {
		return x.SnippetsEnabled
	}
	return false
}

func (x *GitLab) GetCanCreateMergeRequestIn() bool {
	if x != nil {
		return x.CanCreateMergeRequestIn
	}
	return false
}

func (x *GitLab) GetIssuesAccessLevel() string {
	if x != nil {
		return x.IssuesAccessLevel
	}
	return ""
}

func (x *GitLab) GetRepositoryAccessLevel() string {
	if x != nil {
		return x.RepositoryAccessLevel
	}
	return ""
}

func (x *GitLab) GetMergeRequestsAccessLevel() string {
	if x != nil {
		return x.MergeRequestsAccessLevel
	}
	return ""
}

func (x *GitLab) GetWikiAccessLevel() string {
	if x != nil {
		return x.WikiAccessLevel
	}
	return ""
}

func (x *GitLab) GetBuildsAccessLevel() string {
	if x != nil {
		return x.BuildsAccessLevel
	}
	return ""
}

func (x *GitLab) GetSnippetsAccessLevel() string {
	if x != nil {
		return x.SnippetsAccessLevel
	}
	return ""
}

func (x *GitLab) GetPagesAccessLevel() string {
	if x != nil {
		return x.PagesAccessLevel
	}
	return ""
}

func (x *GitLab) GetEmailsDisabled() bool {
	if x != nil {
		return x.EmailsDisabled
	}
	return false
}

func (x *GitLab) GetSharedRunnersEnabled() bool {
	if x != nil {
		return x.SharedRunnersEnabled
	}
	return false
}

func (x *GitLab) GetLfsEnabled() bool {
	if x != nil {
		return x.LfsEnabled
	}
	return false
}

func (x *GitLab) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *GitLab) GetImportStatus() string {
	if x != nil {
		return x.ImportStatus
	}
	return ""
}

func (x *GitLab) GetOpenIssuesCount() int32 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

func (x *GitLab) GetCiDefaultGitDepth() int32 {
	if x != nil {
		return x.CiDefaultGitDepth
	}
	return 0
}

func (x *GitLab) GetPublicJobs() bool {
	if x != nil {
		return x.PublicJobs
	}
	return false
}

func (x *GitLab) GetBuildTimeout() int32 {
	if x != nil {
		return x.BuildTimeout
	}
	return 0
}

func (x *GitLab) GetAutoCancelPendingPipelines() string {
	if x != nil {
		return x.AutoCancelPendingPipelines
	}
	return ""
}

func (x *GitLab) GetBuildCoverageRegex() string {
	if x != nil {
		return x.BuildCoverageRegex
	}
	return ""
}

func (x *GitLab) GetCiConfigPath() string {
	if x != nil {
		return x.CiConfigPath
	}
	return ""
}

func (x *GitLab) GetSharedWithGroups() []string {
	if x != nil {
		return x.SharedWithGroups
	}
	return nil
}

func (x *GitLab) GetOnlyAllowMergeIfPipelineSucceeds() bool {
	if x != nil {
		return x.OnlyAllowMergeIfPipelineSucceeds
	}
	return false
}

func (x *GitLab) GetRequestAccessEnabled() bool {
	if x != nil {
		return x.RequestAccessEnabled
	}
	return false
}

func (x *GitLab) GetOnlyAllowMergeIfAllDiscussionsAreResolved() bool {
	if x != nil {
		return x.OnlyAllowMergeIfAllDiscussionsAreResolved
	}
	return false
}

func (x *GitLab) GetRemoveSourceBranchAfterMerge() bool {
	if x != nil {
		return x.RemoveSourceBranchAfterMerge
	}
	return false
}

func (x *GitLab) GetPrintingMergeRequestLinkEnabled() bool {
	if x != nil {
		return x.PrintingMergeRequestLinkEnabled
	}
	return false
}

func (x *GitLab) GetMergeMethod() string {
	if x != nil {
		return x.MergeMethod
	}
	return ""
}

func (x *GitLab) GetSuggestionCommitMessage() string {
	if x != nil {
		return x.SuggestionCommitMessage
	}
	return ""
}

func (x *GitLab) GetAutoDevopsEnabled() bool {
	if x != nil {
		return x.AutoDevopsEnabled
	}
	return false
}

func (x *GitLab) GetAutoDevopsDeployStrategy() string {
	if x != nil {
		return x.AutoDevopsDeployStrategy
	}
	return ""
}

func (x *GitLab) GetAutocloseReferencedIssues() bool {
	if x != nil {
		return x.AutocloseReferencedIssues
	}
	return false
}

func (x *GitLab) GetOwner() *GitLab_Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GitLab) GetContainerExpirationPolicy() *GitLab_ContainerExpirationPolicy {
	if x != nil {
		return x.ContainerExpirationPolicy
	}
	return nil
}

func (x *GitLab) GetPermissions() *GitLab_Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type GitLab_Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path      string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Kind      string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	FullPath  string `protobuf:"bytes,5,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	ParentId  int32  `protobuf:"varint,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	WebUrl    string `protobuf:"bytes,8,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *GitLab_Namespace) Reset() {
	*x = GitLab_Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_Namespace) ProtoMessage() {}

func (x *GitLab_Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_Namespace.ProtoReflect.Descriptor instead.
func (*GitLab_Namespace) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GitLab_Namespace) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitLab_Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitLab_Namespace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitLab_Namespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GitLab_Namespace) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *GitLab_Namespace) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GitLab_Namespace) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitLab_Namespace) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type GitLab_XLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self          string `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	Issues        string `protobuf:"bytes,2,opt,name=issues,proto3" json:"issues,omitempty"`
	MergeRequests string `protobuf:"bytes,3,opt,name=merge_requests,json=mergeRequests,proto3" json:"merge_requests,omitempty"`
	RepoBranches  string `protobuf:"bytes,4,opt,name=repo_branches,json=repoBranches,proto3" json:"repo_branches,omitempty"`
	Labels        string `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels,omitempty"`
	Events        string `protobuf:"bytes,6,opt,name=events,proto3" json:"events,omitempty"`
	Members       string `protobuf:"bytes,7,opt,name=members,proto3" json:"members,omitempty"`
}

func (x *GitLab_XLinks) Reset() {
	*x = GitLab_XLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_XLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_XLinks) ProtoMessage() {}

func (x *GitLab_XLinks) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_XLinks.ProtoReflect.Descriptor instead.
func (*GitLab_XLinks) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GitLab_XLinks) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *GitLab_XLinks) GetIssues() string {
	if x != nil {
		return x.Issues
	}
	return ""
}

func (x *GitLab_XLinks) GetMergeRequests() string {
	if x != nil {
		return x.MergeRequests
	}
	return ""
}

func (x *GitLab_XLinks) GetRepoBranches() string {
	if x != nil {
		return x.RepoBranches
	}
	return ""
}

func (x *GitLab_XLinks) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *GitLab_XLinks) GetEvents() string {
	if x != nil {
		return x.Events
	}
	return ""
}

func (x *GitLab_XLinks) GetMembers() string {
	if x != nil {
		return x.Members
	}
	return ""
}

type GitLab_Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	State     string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	AvatarUrl string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	WebUrl    string `protobuf:"bytes,6,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *GitLab_Owner) Reset() {
	*x = GitLab_Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_Owner) ProtoMessage() {}

func (x *GitLab_Owner) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_Owner.ProtoReflect.Descriptor instead.
func (*GitLab_Owner) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GitLab_Owner) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitLab_Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitLab_Owner) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitLab_Owner) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GitLab_Owner) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitLab_Owner) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type GitLab_ContainerExpirationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cadence   string `protobuf:"bytes,1,opt,name=cadence,proto3" json:"cadence,omitempty"`
	Enabled   bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeepN     string `protobuf:"bytes,3,opt,name=keep_n,json=keepN,proto3" json:"keep_n,omitempty"`
	OlderThan string `protobuf:"bytes,4,opt,name=older_than,json=olderThan,proto3" json:"older_than,omitempty"`
	NameRegex string `protobuf:"bytes,5,opt,name=name_regex,json=nameRegex,proto3" json:"name_regex,omitempty"`
	NextRunAt string `protobuf:"bytes,6,opt,name=next_run_at,json=nextRunAt,proto3" json:"next_run_at,omitempty"`
}

func (x *GitLab_ContainerExpirationPolicy) Reset() {
	*x = GitLab_ContainerExpirationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_ContainerExpirationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_ContainerExpirationPolicy) ProtoMessage() {}

func (x *GitLab_ContainerExpirationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_ContainerExpirationPolicy.ProtoReflect.Descriptor instead.
func (*GitLab_ContainerExpirationPolicy) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 3}
}

func (x *GitLab_ContainerExpirationPolicy) GetCadence() string {
	if x != nil {
		return x.Cadence
	}
	return ""
}

func (x *GitLab_ContainerExpirationPolicy) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GitLab_ContainerExpirationPolicy) GetKeepN() string {
	if x != nil {
		return x.KeepN
	}
	return ""
}

func (x *GitLab_ContainerExpirationPolicy) GetOlderThan() string {
	if x != nil {
		return x.OlderThan
	}
	return ""
}

func (x *GitLab_ContainerExpirationPolicy) GetNameRegex() string {
	if x != nil {
		return x.NameRegex
	}
	return ""
}

func (x *GitLab_ContainerExpirationPolicy) GetNextRunAt() string {
	if x != nil {
		return x.NextRunAt
	}
	return ""
}

type GitLab_Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectAccess *GitLab_Permissions_ProjectAccess `protobuf:"bytes,1,opt,name=project_access,json=projectAccess,proto3" json:"project_access,omitempty"`
	GroupAccess   *GitLab_Permissions_ProjectAccess `protobuf:"bytes,2,opt,name=group_access,json=groupAccess,proto3" json:"group_access,omitempty"`
}

func (x *GitLab_Permissions) Reset() {
	*x = GitLab_Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_Permissions) ProtoMessage() {}

func (x *GitLab_Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_Permissions.ProtoReflect.Descriptor instead.
func (*GitLab_Permissions) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 4}
}

func (x *GitLab_Permissions) GetProjectAccess() *GitLab_Permissions_ProjectAccess {
	if x != nil {
		return x.ProjectAccess
	}
	return nil
}

func (x *GitLab_Permissions) GetGroupAccess() *GitLab_Permissions_ProjectAccess {
	if x != nil {
		return x.GroupAccess
	}
	return nil
}

type GitLab_Permissions_ProjectAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessLevel       int32 `protobuf:"varint,1,opt,name=access_level,json=accessLevel,proto3" json:"access_level,omitempty"`
	NotificationLevel int32 `protobuf:"varint,2,opt,name=notification_level,json=notificationLevel,proto3" json:"notification_level,omitempty"`
}

func (x *GitLab_Permissions_ProjectAccess) Reset() {
	*x = GitLab_Permissions_ProjectAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_conf_gitlab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab_Permissions_ProjectAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab_Permissions_ProjectAccess) ProtoMessage() {}

func (x *GitLab_Permissions_ProjectAccess) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_gitlab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab_Permissions_ProjectAccess.ProtoReflect.Descriptor instead.
func (*GitLab_Permissions_ProjectAccess) Descriptor() ([]byte, []int) {
	return file_internal_conf_gitlab_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *GitLab_Permissions_ProjectAccess) GetAccessLevel() int32 {
	if x != nil {
		return x.AccessLevel
	}
	return 0
}

func (x *GitLab_Permissions_ProjectAccess) GetNotificationLevel() int32 {
	if x != nil {
		return x.NotificationLevel
	}
	return 0
}

var File_internal_conf_gitlab_proto protoreflect.FileDescriptor

var file_internal_conf_gitlab_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f,
	0x6e, 0x66, 0x22, 0x85, 0x1f, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x27, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x55,
	0x72, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x5f, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x6b, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x6b, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x69, 0x6b, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77,
	0x69, 0x6b, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x66, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x66, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x63, 0x69, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x69, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x4f, 0x0a, 0x25, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49,
	0x66, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x30, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x29, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x49, 0x66, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x6f, 0x70, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x76, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x6f, 0x70, 0x73,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x76, 0x6f,
	0x70, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xc9, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x1a, 0xca, 0x01, 0x0a,
	0x06, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x1a, 0xc6, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x65, 0x70, 0x4e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x1a, 0x8d, 0x02, 0x0a, 0x0b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x62, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_conf_gitlab_proto_rawDescOnce sync.Once
	file_internal_conf_gitlab_proto_rawDescData = file_internal_conf_gitlab_proto_rawDesc
)

func file_internal_conf_gitlab_proto_rawDescGZIP() []byte {
	file_internal_conf_gitlab_proto_rawDescOnce.Do(func() {
		file_internal_conf_gitlab_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_conf_gitlab_proto_rawDescData)
	})
	return file_internal_conf_gitlab_proto_rawDescData
}

var file_internal_conf_gitlab_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_internal_conf_gitlab_proto_goTypes = []interface{}{
	(*GitLab)(nil),                           // 0: conf.GitLab
	(*GitLab_Namespace)(nil),                 // 1: conf.GitLab.Namespace
	(*GitLab_XLinks)(nil),                    // 2: conf.GitLab._Links
	(*GitLab_Owner)(nil),                     // 3: conf.GitLab.Owner
	(*GitLab_ContainerExpirationPolicy)(nil), // 4: conf.GitLab.Container_expiration_policy
	(*GitLab_Permissions)(nil),               // 5: conf.GitLab.Permissions
	(*GitLab_Permissions_ProjectAccess)(nil), // 6: conf.GitLab.Permissions.Project_access
}
var file_internal_conf_gitlab_proto_depIdxs = []int32{
	1, // 0: conf.GitLab.namespace:type_name -> conf.GitLab.Namespace
	2, // 1: conf.GitLab._links:type_name -> conf.GitLab._Links
	3, // 2: conf.GitLab.owner:type_name -> conf.GitLab.Owner
	4, // 3: conf.GitLab.container_expiration_policy:type_name -> conf.GitLab.Container_expiration_policy
	5, // 4: conf.GitLab.permissions:type_name -> conf.GitLab.Permissions
	6, // 5: conf.GitLab.Permissions.project_access:type_name -> conf.GitLab.Permissions.Project_access
	6, // 6: conf.GitLab.Permissions.group_access:type_name -> conf.GitLab.Permissions.Project_access
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_internal_conf_gitlab_proto_init() }
func file_internal_conf_gitlab_proto_init() {
	if File_internal_conf_gitlab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_conf_gitlab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_XLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_ContainerExpirationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_conf_gitlab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab_Permissions_ProjectAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_conf_gitlab_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_conf_gitlab_proto_goTypes,
		DependencyIndexes: file_internal_conf_gitlab_proto_depIdxs,
		MessageInfos:      file_internal_conf_gitlab_proto_msgTypes,
	}.Build()
	File_internal_conf_gitlab_proto = out.File
	file_internal_conf_gitlab_proto_rawDesc = nil
	file_internal_conf_gitlab_proto_goTypes = nil
	file_internal_conf_gitlab_proto_depIdxs = nil
}
